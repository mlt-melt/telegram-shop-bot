from config import dp, bot, db, bot_url, admins
from aiogram import types
from aiogram.dispatcher import FSMContext
from markups import cancel_mkp, menu_mkp, usermenu_mkp
from states import Withdraw, Deposit
from payments import get_payment, getCoins, createPayment, create_pay
from captcha import Captcha
from functions import translater, anti_flood, torub, rubto
import requests

def get_courses():
    a = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
    usd = a.json()['Valute']['USD']['Value']
    eur = a.json()['Valute']['EUR']['Value']
    returns = [usd, eur]
    return returns

@dp.message_handler(text='–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§')
@dp.message_handler(text='User menu üë§')
@dp.throttled(anti_flood,rate=1)
async def usermenumsg(message: types.Message):
    if db.check_ban(message.from_user.id):
        if db.check_userstat(message.from_user.id) != 'reg':
            curr = db.get_currencysetadm()[0]
            user_id = message.from_user.id
            user_info = db.get_user_info(int(user_id))
            username = user_info[0]
            if username == '' or username == 'None' or username == None:
                username = ''
            else:
                username = translater(message.from_user.id, '–õ–æ–≥–∏–Ω: ') + f'@{username}\n'
            balance = round(rubto(curr, user_info[1]), 2)
            nickname = db.get_usernamerev(message.from_user.id)
            pay_count = user_info[2]
            if pay_count == None:
                pay_count = 0
            userstatus = db.get_userstatus_new(int(user_id))
            db.remove_old_orders()
            await message.answer(translater(message.from_user.id, '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')+': '+translater(message.from_user.id, userstatus)+'\n-------------------\n'+translater(message.from_user.id ,'–ù–∏–∫: ')+nickname+'\n'+username+translater(message.from_user.id, '–ë–∞–ª–∞–Ω—Å: ')+str(balance)+' '+str(curr)+'\n'+translater(message.from_user.id, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: ')+str(db.get_procent(int(user_id)))+'%\n'+translater(message.from_user.id, f'–ö—É–ø–æ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É: ') + (db.get_promoadm(int(user_id))) +'\n-------------------\n'+translater(message.from_user.id, '–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')+'\n'+translater(message.from_user.id, '–ü–æ–∫—É–ø–æ–∫: ')+str(pay_count)+'\n'+translater(message.from_user.id, '–ù–∞ —Å—É–º–º—É: ')+str(round(rubto(curr, db.get_count_buyspr(int(user_id))), 2))+' '+str(curr)+'\n-------------------\n'+translater(message.from_user.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ.—Å–∏—Å—Ç–µ–º—ã:')+'\n'+translater(message.from_user.id, '–†–µ—Ñ. –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ')+str(db.get_count_refs(int(user_id)))+'\n'+translater(message.from_user.id, '–†–µ—Ñ. –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ')+str(round(db.get_refbalance(int(user_id)), 2)))
            await message.answer(translater(message.from_user.id, '–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'), reply_markup=usermenu_mkp(message.from_user.id))
        else:
            captcha = Captcha()
            captcha.register_handlers(dp)
            
            await message.answer(
                captcha.get_caption(),
                reply_markup=captcha.get_captcha_keyboard()
            )



@dp.message_handler(text='–ë–∞–ª–∞–Ω—Å üí∞')
@dp.message_handler(text='Balance üí∞')
@dp.throttled(anti_flood,rate=1)
async def balancemsg(message: types.Message):
    if db.check_ban(message.from_user.id):
        if db.check_userstat(message.from_user.id) != 'reg':
            curr = db.get_currencysetadm()[0]
            balance = rubto(curr, db.get_balance(message.from_user.id))
            ref_balance = rubto(curr, db.get_refbalance(message.from_user.id))
            mkp = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton(translater(message.from_user.id, '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'), callback_data='deposit')
            btn2 = types.InlineKeyboardButton(translater(message.from_user.id, '–í—ã–≤–µ—Å—Ç–∏'), callback_data='withdraw')
            mkp.add(btn1, btn2)
            await message.answer('<b>'+translater(message.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å')+f'</b>: <code>{float(balance)}</code> {curr}\n<b>'+translater(message.from_user.id, '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')+f'</b>: <code>{float(ref_balance)}</code> {curr}', reply_markup=mkp)
        else:
            captcha = Captcha()
            captcha.register_handlers(dp)
            
            await message.answer(
                captcha.get_caption(),
                reply_markup=captcha.get_captcha_keyboard()
            )

@dp.callback_query_handler(text='deposit')
async def depositcall(call: types.CallbackQuery):
    await call.message.delete_reply_markup()
    await call.message.answer(translater(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:'), reply_markup=cancel_mkp(call.from_user.id))
    await Deposit.Amount.set()



@dp.message_handler(state=Deposit.Amount)
@dp.throttled(anti_flood,rate=1)
async def depositamountmsg(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        curr = db.get_currencysetadm()[0]
        if curr == 'rub':
            if amount > 499:
                async with state.proxy() as data:
                    data['Amount'] = amount
                qiwistat = db.get_qiwi_stat()
                cryptostat = db.get_crypto_stat()
                yoomoney = db.get_yoomoney_stat()
                print(yoomoney)
                print(cryptostat)
                mkp = types.InlineKeyboardMarkup()
                btn1 = types.InlineKeyboardButton('Qiwi', callback_data='depqiwi')
                btn2 = types.InlineKeyboardButton('Yoomoney', callback_data='depyoomoney')
                btn3 = types.InlineKeyboardButton('Crypto', callback_data='depcrypto')
                btn4 = types.InlineKeyboardButton(translater(message.from_user.id, '–û—Ç–º–µ–Ω–∏—Ç—å'), callback_data='cancel')

                if qiwistat == 'on':
                    mkp.insert(btn1)
                if cryptostat == 'on':
                    mkp.insert(btn3)
                if yoomoney == 'on':
                    mkp.insert(btn2)
                mkp.add(btn4)
                await message.answer(translater(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'), reply_markup=mkp)
            else:
                await message.answer(translater(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ 500 —Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'))
        else:
            if amount > 4:
                async with state.proxy() as data:
                    data['Amount'] = amount
                qiwistat = db.get_qiwi_stat()
                cryptostat = db.get_crypto_stat()
                yoomoney = db.get_yoomoney_stat()
                mkp = types.InlineKeyboardMarkup()
                btn1 = types.InlineKeyboardButton('Qiwi', callback_data='depqiwi')
                btn2 = types.InlineKeyboardButton('Yoomoney', callback_data='depyoomoney')
                btn3 = types.InlineKeyboardButton('Crypto', callback_data='depcrypto')
                btn4 = types.InlineKeyboardButton(translater(message.from_user.id, '–û—Ç–º–µ–Ω–∏—Ç—å'), callback_data='cancel')

                if qiwistat == 'on':
                    mkp.insert(btn1)
                if cryptostat == 'on':
                    mkp.insert(btn3)
                if yoomoney == 'on':
                    mkp.insert(btn2)
                mkp.add(btn4)
                await message.answer(translater(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'), reply_markup=mkp)
            else:
                await message.answer(translater(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ 4 usd/eur. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'))
    except:
        await message.answer(translater(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:')+'<code>134.50</code>', reply_markup=cancel_mkp(message.from_user.id))


@dp.callback_query_handler(text='depcrypto', state=Deposit.Amount)
async def depcryptodepamountcall(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        pass
    amount = data['Amount']
    await call.message.delete_reply_markup()
    await call.answer(translater(call.from_user.id, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'))
    coins = await getCoins()
    mkp = types.InlineKeyboardMarkup(row_width=4)
    for coin in coins:
        mkp.insert(types.InlineKeyboardButton(coin, callback_data=f'cryptodep_{coin}_n_{amount}'))
    await call.message.answer(translater(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã'), reply_markup=mkp)
    await state.finish()

@dp.callback_query_handler(text_contains='cryptodep_')
async def cryptodepcall(call: types.CallbackQuery):
    crypto = call.data.split('_')[1]
    amount = call.data.split('_')[3]
    currency = db.get_currencysetadm()[0]
    try:
        paym = await createPayment(amount, crypto, currency)
        pay_amount = paym['pay_amount']
        pay_adress = paym['pay_address']
        pay_currency = paym['pay_currency']
        pay_id = paym['payment_id']
        mkp = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(translater(call.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), callback_data=f'cryptocheck_{pay_id}_n_{amount}')
        mkp.add(btn)
        await call.message.answer(translater(call.from_user.id, '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ')+f': <code>{pay_amount}</code> {pay_currency}\n'+translater(call.from_user.id, '–ù–∞ –∫–æ—à–µ–ª–µ–∫')+f': <code>{pay_adress}</code>\n\n'+translater(call.from_user.id, '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É". –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–æ 2-—Ö —á–∞—Å–æ–≤'), reply_markup=mkp)
    except:
        await call.message.answer(translater(call.from_user.id, '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –±–æ–ª—å—à—É—é —Å—É–º–º—É'), reply_markup=menu_mkp(call.from_user.id))

@dp.callback_query_handler(text='depyoomoney', state=Deposit.Amount)
async def depyoomoneycall(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        pass
    amount = data['Amount']
    curr = db.get_currencysetadm()[0]
    amount = torub(curr, amount)
    await call.message.delete_reply_markup()
    payments = create_pay(float(amount), call.from_user.id, 'n')
    paylink = payments[0]
    billid = payments[1]
    mkp = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(translater(call.from_user.id, '–û–ø–ª–∞—Ç–∏—Ç—å'), url=paylink)
    btn2 = types.InlineKeyboardButton(translater(call.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), callback_data=f'checkpayyoom_n_{amount}_{billid}')
    mkp.add(btn1).add(btn2)
    await call.message.answer(translater(call.from_user.id, '–û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"'), reply_markup=mkp)
    await state.finish()


@dp.callback_query_handler(text='depqiwi', state=Deposit.Amount)
async def depqiwicall(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        pass
    curr = db.get_currencysetadm()[0]
    amount = data['Amount']
    amount = torub(curr, amount)
    await call.message.delete_reply_markup()
    paylink = get_payment(call.from_user.id, 'n', float(amount))
    mkp = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(translater(call.from_user.id, '–û–ø–ª–∞—Ç–∏—Ç—å'), url=paylink.pay_url)
    btn2 = types.InlineKeyboardButton(translater(call.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), callback_data=f'checkpayqiwi_n_{amount}_{paylink.bill_id}')
    mkp.add(btn1).add(btn2)
    await call.message.answer(translater(call.from_user.id, '–û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"'), reply_markup=mkp)
    await state.finish()

@dp.callback_query_handler(state=Deposit.Amount, text='cancel')
async def canceldepositamountcall(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(translater(call.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é'), reply_markup=menu_mkp(call.from_user.id))
    await state.finish()



@dp.callback_query_handler(text='withdraw')
async def withdrawcall(call: types.CallbackQuery):
    balance = db.get_balance(call.from_user.id)
    if float(balance) > 0:
        await call.message.delete_reply_markup()
        await call.message.answer(translater(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:'), reply_markup=cancel_mkp(call.from_user.id))
        await Withdraw.Amount.set()
    else:
        await call.answer(translater(call.from_user.id, '–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ 0 RUB'), show_alert=True)

@dp.message_handler(state=Withdraw.Amount)
async def withdrawamountmsg(message: types.Message, state: FSMContext):
    try:
        msg = float(message.text)
        bal = float(db.get_balance(message.from_user.id))
        if msg <= bal:
            async with state.proxy() as data:
                data['Amount'] = msg
            await message.answer(translater(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:')+' <code>Qiwi +7123456789</code>', reply_markup=cancel_mkp(message.from_user.id))
            await Withdraw.next()
        else:
            await message.answer(translater(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, —á–µ–º —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'), reply_markup=cancel_mkp(message.from_user.id))
    except:
        await message.answer(translater(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:')+' <code>151.21</code>', reply_markup=cancel_mkp(message.from_user.id))

@dp.message_handler(state=Withdraw.Req)
async def withdrawreqmsg(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Req'] = message.text
    amount = data['Amount']
    req = data['Req']
    mkp = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–î–∞', callback_data='go')
    btn2 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    mkp.add(btn1).add(btn2)
    currency = db.get_currencysetadm()[0]
    await message.answer(translater(message.from_user.id, '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥')+f' <code>{amount}</code> {currency.upper()}\n'+translater(message.from_user.id, '–ù–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')+f': {req}', reply_markup=mkp)

@dp.callback_query_handler(text='go', state=Withdraw.Req)
async def gowithdrawreqcall(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        pass
    amount = data['Amount']
    currency = db.get_currencysetadm()[0]
    courses = get_courses()
    if currency == "usd":
        amount = float(amount)*float(courses[0])
    elif currency == "eur":
        amount = float(amount)*float(courses[1])
    req = data['Req']
    await call.message.delete()
    await call.message.answer(translater(call.from_user.id, '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é'), reply_markup=menu_mkp(call.from_user.id))
    db.pay_balance(call.from_user.id, float(amount))
    db.add_withdraw(call.from_user.id, amount, req)
    await state.finish()
    for admin in admins:
        try:
            await bot.send_message(admin, f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ—ë –≤ –∞–¥–º–∏–Ω–∫–µ')
        except:
            pass

@dp.callback_query_handler(text='cancel', state=Withdraw.Req)
@dp.callback_query_handler(text='cancel', state=Withdraw.Amount)
async def cancelwithdraw(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(translater(call.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é'), reply_markup=menu_mkp(call.from_user.id))
    await state.finish()


@dp.message_handler(text='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üë•')
@dp.message_handler(text='Refferal system üë•')
@dp.throttled(anti_flood,rate=1)
async def refsystemmsg(message: types.Message):
    if db.check_ban(message.from_user.id):
        if db.check_userstat(message.from_user.id) != 'reg':
            ref = db.get_refproc_for_user(message.from_user.id)
            count_ref = db.get_all_refs(message.from_user.id)
            await message.answer(translater(message.from_user.id, '–í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞')+f': <code>{bot_url}?start={message.from_user.id}</code>\n\n'+translater(message.from_user.id, '–í—ã –ø–æ–ª—É—á–∏—Ç–µ')+f' {ref}% '+translater(message.from_user.id, '—Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ')+f': {len(count_ref)}')
        else:
            captcha = Captcha()
            captcha.register_handlers(dp)
            
            await message.answer(
                captcha.get_caption(),
                reply_markup=captcha.get_captcha_keyboard()
            )

@dp.message_handler(text='–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ üì¶')
@dp.message_handler(text='My purchases üì¶')
@dp.throttled(anti_flood,rate=1)
async def myordersmsg(message: types.Message):
    if db.check_ban(message.from_user.id):
        if db.check_userstat(message.from_user.id) != 'reg':
            active_order = db.get_actorders(message.from_user.id)
            end_orders = db.get_endorders(message.from_user.id)
            wait_orders = db.get_waitorders(message.from_user.id)
            db.remove_old_orders()
            if len(active_order) == 0:
                await message.answer(translater(message.from_user.id, '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'))
            else:
                text = ''
                for i in active_order:
                    text=f'{text}---------------------\n'
                    step = 1
                    for a in i:
                        try:
                            curr = db.get_currencysetadm()[0]
                            if curr == 'rub':
                                price = float(a)
                            else:
                                price = rubto(curr, float(a))
                                price = float(price)
                                price = f'{price:.2f}'
                            text=f'{text}'+translater(message.from_user.id, '–°—É–º–º–∞')+f': {float(price)}\n'
                        except:
                            text=f'{text}{step}.{i[0]}\n'
                        step=step+1
                await message.answer(translater(message.from_user.id, '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã')+f':\n{text}')
        
            if len(end_orders) == 0:
                await message.answer(translater(message.from_user.id, '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'))
            else:
                text = ''
                for i in end_orders:
                    text=f'{text}---------------------\n'
                    step = 1
                    for a in i:
                        try:
                            curr = db.get_currencysetadm()[0]
                            if curr == 'rub':
                                price = float(a)
                            else:
                                price = rubto(curr, float(a))
                                price = float(price)
                                price = f'{price:.2f}'
                            text=f'{text}'+translater(message.from_user.id, '–°—É–º–º–∞')+f': {float(price)}\n'
                        except:
                            text=f'{text}{step}. {i[0]}\n'
                        step=step+1
                await message.answer(translater(message.from_user.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞')+f':\n{text}')
            try:
                if len(wait_orders[0]) > 0:
                    text=''
                    text=f'{text}---------------------\n'
                    step = 1
                    for a in wait_orders[0][0]:
                        try:
                            curr = db.get_currencysetadm()[0]
                            if curr == 'rub':
                                price = float(a)
                            else:
                                price = rubto(curr, float(a))
                                price = float(price)
                                price = f'{price:.2f}'
                            text=f'{text}\n'+translater(message.from_user.id, '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞')+f': {float(price)}\n'
                        except:
                            text=f'{text}{step}. {a}\n'
                        step+=1
                    
                    replyMkp = types.InlineKeyboardMarkup()
                    btn1 = types.InlineKeyboardButton(translater(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), callback_data=wait_orders[1])
                    replyMkp.add(btn1)

                    await message.answer(translater(message.from_user.id, '–ó–∞–∫–∞–∑, –æ–∂–∏–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—ã:')+f'\n{text}---------------------\n–†–µ–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ')
                    await bot.copy_message(message.from_user.id, message.from_user.id, int(db.get_reply_id(wait_orders[1])), reply_markup=replyMkp)

            except:
                pass
        else:
            captcha = Captcha()
            captcha.register_handlers(dp)
            
            await message.answer(
                captcha.get_caption(),
                reply_markup=captcha.get_captcha_keyboard()
            )