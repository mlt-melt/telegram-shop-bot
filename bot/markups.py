from aiogram import types
from config import db
from functions import translater


def rules_mkp(user_id):
    mkp = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å / Accept', callback_data='rulesok')
    btn2 = types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å / Reject', callback_data='rulesno')
    mkp.add(btn1).add(btn2)
    return mkp


def menu_mkp(user_id):
    mkp = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton(translater(user_id, '–ú–∞–≥–∞–∑–∏–Ω') + " üõç")
    btn2 = types.KeyboardButton(translater(user_id, '–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') + " üë§")
    btn3 = types.KeyboardButton('‚ùì F.A.Q. ‚ùì')
    btn4 = types.KeyboardButton(translater(user_id, '–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏') + " üìù")
    btn5 = types.KeyboardButton(translater(user_id, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞') + " ‚úâÔ∏è")
    mkp.add(btn1, btn2).add(btn5, btn4).add(btn3)
    return mkp

def menu_mkp_without_sprt_btn(user_id):
    mkp = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton(translater(user_id, '–ú–∞–≥–∞–∑–∏–Ω') + " üõç")
    btn2 = types.KeyboardButton(translater(user_id, '–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') + " üë§")
    btn3 = types.KeyboardButton('‚ùì F.A.Q. ‚ùì')
    btn4 = types.KeyboardButton(translater(user_id, '–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏') + " üìù")
    mkp.add(btn1, btn2).add(btn3, btn4)
    return mkp

def menu_mkp_admin():
    mkp = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton('–ú–∞–≥–∞–∑–∏–Ω üõç')
    btn2 = types.KeyboardButton('–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§')
    btn3 = types.KeyboardButton('‚ùì F.A.Q. ‚ùì')
    btn4 = types.KeyboardButton('–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ üìù')
    btn5 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚úâÔ∏è')
    btn6 = types.KeyboardButton('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    mkp.add(btn1, btn2).add(btn5, btn4).add(btn3).add(btn6)
    return mkp

def usermenu_mkp(user_id):
    mkp = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton(translater(user_id, '–ë–∞–ª–∞–Ω—Å') + " üí∞")
    btn2 = types.KeyboardButton(translater(user_id, '–ö–æ—Ä–∑–∏–Ω–∞') + " üõí")
    btn3 = types.KeyboardButton(translater(user_id, '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏') + " üì¶")
    btn4 = types.KeyboardButton(translater(user_id, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞') + " üë•")
    btn5 = types.KeyboardButton("‚¨ÖÔ∏è " + translater(user_id, '–í –º–µ–Ω—é'))
    btn6 = types.KeyboardButton(translater(user_id, '–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'))
    if db.check_countlan() == 'ok':
        mkp.add(btn1, btn2).add(btn3, btn4).add(btn5).add(btn6)
    else:
        mkp.add(btn1, btn2).add(btn3, btn4).add(btn5)
    return mkp

def cancel_mkp(user_id):
    mkp = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton(translater(user_id, '–û—Ç–º–µ–Ω–∏—Ç—å'), callback_data='cancel')
    mkp.add(btn1)
    return mkp

def cancel_adm_mkp():
    mkp = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    mkp.add(btn1)
    return mkp

def admin_mkp():
    mkp = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton('–ü—Ä–æ–¥—É–∫—Ç—ã')
    btn2 = types.KeyboardButton('–ó–∞–∫–∞–∑—ã')
    btn3 = types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    btn4 = types.KeyboardButton('–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥')
    btn5 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

    # btn8 = types.KeyboardButton('–í–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    btn8 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    # btn9 = types.KeyboardButton('–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥')
    btn10 = types.KeyboardButton('–†–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    # mkp.add(btn1, btn2).add(btn3, btn4).add(btn5).add(btn6).add(btn7).add(btn8).add(btn9).add(btn10)
    mkp.add(btn1, btn2).add(btn3, btn4).add(btn5, btn8).add(btn10)
    return mkp

def botsettings_mkp():
    mkp = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã')
    btn2 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')
    btn3 = types.KeyboardButton('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ')
    btn4 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ F.A.Q')
    btn5 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞')
    btn6 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞')
    btn7 = types.KeyboardButton('–ü–ª–∞—Ç–∞ –∑–∞ –æ—Ç–∑—ã–≤')
    btn8 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞')
    btn9 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª—é—Ç')
    btn10 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É')
    mkp.add(btn1, btn2).add(btn3, btn4).add(btn5, btn7).add(btn8, btn9).add(btn10)
    return mkp


def all_users_mkp(page):
    users_list = db.get_all_users()
    mkp = types.InlineKeyboardMarkup(row_width=2)

    if page == 1:
        if len(users_list) < 11:
            for i in users_list:
                try:
                    mkp.add(types.InlineKeyboardButton(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i[1]} | {db.get_username(int(i[1]))}', callback_data=f'getuser_{i[1]}_{page}'))
                except Exception as ex:
                    print(ex)
        else:
            try:
                for i in range(page-1, page*10):
                    mkp.add(types.InlineKeyboardButton(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users_list[i][1]} | {db.get_username(int(users_list[i][1]))}', callback_data=f'getuser_{users_list[i][1]}_{page}'))
                mkp.add(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data=f'usersnext_{page+1}'))
            except:
                pass
    else:
        try:
            for i in range((page-1)*10, page*10):
                mkp.add(types.InlineKeyboardButton(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users_list[i][1]} | {db.get_username(int(users_list[i][1]))}', callback_data=f'getuser_{users_list[i][1]}_{page}'))
            mkp.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'usersback_{page-1}'), types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data=f'usersnext_{page+1}'))
        except:
            mkp.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'usersback_{page-1}'))
    mkp.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='admin'))
    return mkp

def deliveriesadm_mkp():
    delivery_list = db.get_adm_delivery()
    mkp = types.InlineKeyboardMarkup()
    for delivery in delivery_list:
        if delivery[2] == 'off':
            mkp.add(types.InlineKeyboardButton(f'‚ùå {delivery[1]}', callback_data=f'admdeliveryset_{delivery[0]}'))
        elif delivery[2] == 'on':
            mkp.add(types.InlineKeyboardButton(f'‚úÖ {delivery[1]}', callback_data=f'admdeliveryset_{delivery[0]}'))
    mkp.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', callback_data='deliveryadd'))
    return mkp

def deliveryuser_mkp(user_id):
    delivery_list = db.get_deliveryuser(int(user_id))
    mkp = types.InlineKeyboardMarkup()
    curr = db.get_currencysetadm()[0]
    for delivery in delivery_list:
        mkp.add(types.InlineKeyboardButton(f'{delivery[1]} | {delivery[2]} {curr.upper()}', callback_data=f'delivery_{delivery[0]}'))
    mkp.add(types.InlineKeyboardButton(translater(user_id, '–û—Ç–º–µ–Ω–∏—Ç—å'), callback_data='cancel'))
    return mkp


def questions_mkp():
    questions_list = db.get_questions()
    mkp = types.InlineKeyboardMarkup()
    for quest in questions_list:
        mkp.add(types.InlineKeyboardButton(f'–í–æ–ø—Ä–æ—Å ‚Ññ{quest[0]} | {db.get_username(int(quest[1]))}', callback_data=f'question_{quest[0]}'))
    mkp.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin'))
    return mkp

def questions_support_mkp():
    questions_list = db.get_questions()
    mkp = types.InlineKeyboardMarkup()
    for quest in questions_list:
        mkp.add(types.InlineKeyboardButton(f'–í–æ–ø—Ä–æ—Å ‚Ññ{quest[0]} | {db.get_username(int(quest[1]))}', callback_data=f'question_{quest[0]}'))
    return mkp

def withdraws_mkp():
    withdraw_list = db.get_withdraws()
    mkp = types.InlineKeyboardMarkup()
    
    for withdraw in withdraw_list:
        mkp.add(types.InlineKeyboardButton(f'–ó–∞—è–≤–∫–∞ ‚Ññ{withdraw[0]}', callback_data=f'withdr_{withdraw[0]}'))
    mkp.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin'))
    return mkp

def lan_settingmkp():
    lan_set = db.get_languagesadm()

    mkp = types.InlineKeyboardMarkup()
    if lan_set[0] == 0:
        mkp.add(types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π ‚ùå', callback_data='setlanset_ru'))
    else:
        mkp.add(types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π ‚úÖ', callback_data='setlanset_ru'))
    
    if lan_set[1] == 0:
        mkp.add(types.InlineKeyboardButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚ùå', callback_data='setlanset_en'))
    else:
        mkp.add(types.InlineKeyboardButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚úÖ', callback_data='setlanset_en'))
    mkp.add(types.InlineKeyboardButton('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin'))
    return mkp